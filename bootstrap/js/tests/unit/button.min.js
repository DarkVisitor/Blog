$(function(){QUnit.module("button plugin");QUnit.test("should be defined on jquery object",function(a){a.expect(1);a.ok($(document.body).button,"button method is defined")});QUnit.module("button",{beforeEach:function(){$.fn.bootstrapButton=$.fn.button.noConflict()},afterEach:function(){$.fn.button=$.fn.bootstrapButton;delete $.fn.bootstrapButton}});QUnit.test("should provide no conflict",function(a){a.expect(1);a.strictEqual($.fn.button,undefined,"button was set back to undefined (org value)")});QUnit.test("should return jquery collection containing the element",function(a){a.expect(2);var b=$("<div/>");var c=b.bootstrapButton();a.ok(c instanceof $,"returns jquery collection");a.strictEqual(c[0],b[0],"collection contains element")});QUnit.test("should toggle active",function(a){a.expect(2);var b=$('<button class="btn" data-toggle="button">mdo</button>');a.ok(!b.hasClass("active"),"btn does not have active class");b.bootstrapButton("toggle");a.ok(b.hasClass("active"),"btn has class active")});QUnit.test("should toggle active when btn children are clicked",function(a){a.expect(2);var b=$('<button class="btn" data-toggle="button">mdo</button>');var c=$("<i/>");b.append(c).appendTo("#qunit-fixture");a.ok(!b.hasClass("active"),"btn does not have active class");c.trigger("click");a.ok(b.hasClass("active"),"btn has class active")});QUnit.test("should toggle aria-pressed",function(a){a.expect(2);var b=$('<button class="btn" data-toggle="button" aria-pressed="false">redux</button>');a.strictEqual(b.attr("aria-pressed"),"false","btn aria-pressed state is false");b.bootstrapButton("toggle");a.strictEqual(b.attr("aria-pressed"),"true","btn aria-pressed state is true")});QUnit.test("should toggle aria-pressed on buttons with container",function(a){a.expect(1);var b='<div class="btn-group" data-toggle="buttons"><button id="btn1" class="btn btn-secondary" type="button">One</button><button class="btn btn-secondary" type="button">Two</button></div>';$("#qunit-fixture").append(b);$("#btn1").bootstrapButton("toggle");a.strictEqual($("#btn1").attr("aria-pressed"),"true")});QUnit.test("should toggle aria-pressed when btn children are clicked",function(a){a.expect(2);var b=$('<button class="btn" data-toggle="button" aria-pressed="false">redux</button>');var c=$("<i/>");b.append(c).appendTo("#qunit-fixture");a.strictEqual(b.attr("aria-pressed"),"false","btn aria-pressed state is false");c.trigger("click");a.strictEqual(b.attr("aria-pressed"),"true","btn aria-pressed state is true")});QUnit.test("should trigger input change event when toggled button has input field",function(b){b.expect(1);var a=b.async();var d='<div class="btn-group" data-toggle="buttons"><label class="btn btn-primary"><input type="radio" id="radio" autocomplete="off">Radio</label></div>';var c=$(d).appendTo("#qunit-fixture");c.find("input").on("change",function(f){f.preventDefault();b.ok(true,"change event fired");a()});c.find("label").trigger("click")});QUnit.test("should check for closest matching toggle",function(b){b.expect(12);var e='<div class="btn-group" data-toggle="buttons"><label class="btn btn-primary active"><input type="radio" name="options" id="option1" checked="true"> Option 1</label><label class="btn btn-primary"><input type="radio" name="options" id="option2"> Option 2</label><label class="btn btn-primary"><input type="radio" name="options" id="option3"> Option 3</label></div>';var d=$(e).appendTo("#qunit-fixture");var c=d.children().eq(0);var a=d.children().eq(1);b.ok(c.hasClass("active"),"btn1 has active class");b.ok(c.find("input").prop("checked"),"btn1 is checked");b.ok(!a.hasClass("active"),"btn2 does not have active class");b.ok(!a.find("input").prop("checked"),"btn2 is not checked");a.find("input").trigger("click");b.ok(!c.hasClass("active"),"btn1 does not have active class");b.ok(!c.find("input").prop("checked"),"btn1 is not checked");b.ok(a.hasClass("active"),"btn2 has active class");b.ok(a.find("input").prop("checked"),"btn2 is checked");a.find("input").trigger("click");b.ok(!c.hasClass("active"),"btn1 does not have active class");b.ok(!c.find("input").prop("checked"),"btn1 is not checked");b.ok(a.hasClass("active"),"btn2 has active class");b.ok(a.find("input").prop("checked"),"btn2 is checked")});QUnit.test('should not add aria-pressed on labels for radio/checkbox inputs in a data-toggle="buttons" group',function(b){b.expect(2);var e='<div class="btn-group" data-toggle="buttons"><label class="btn btn-primary"><input type="checkbox" autocomplete="off"> Checkbox</label><label class="btn btn-primary"><input type="radio" name="options" autocomplete="off"> Radio</label></div>';var d=$(e).appendTo("#qunit-fixture");var c=d.children().eq(0);var a=d.children().eq(1);c.find("input").trigger("click");b.ok(c.is(":not([aria-pressed])"),"label for nested checkbox input has not been given an aria-pressed attribute");a.find("input").trigger("click");b.ok(a.is(":not([aria-pressed])"),"label for nested radio input has not been given an aria-pressed attribute")});QUnit.test("should handle disabled attribute on non-button elements",function(a){a.expect(2);var d='  <div class="btn-group disabled" data-toggle="buttons" aria-disabled="true" disabled><label class="btn btn-danger disabled" aria-disabled="true" disabled><input type="checkbox" aria-disabled="true" autocomplete="off" disabled class="disabled"/></label></div>';var b=$(d).appendTo("#qunit-fixture");var c=b.children().eq(0);var e=c.children().eq(0);c.trigger("click");a.ok(c.is(":not(.active)"),"button did not become active");a.ok(!e.is(":checked"),"checkbox did not get checked")})});
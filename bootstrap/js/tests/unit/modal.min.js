$(function(){QUnit.module("modal plugin");QUnit.test("should be defined on jquery object",function(a){a.expect(1);a.ok($(document.body).modal,"modal method is defined")});QUnit.module("modal",{before:function(){$('<style type="text/css"> .modal-scrollbar-measure { position: absolute; top: -9999px; width: 50px; height: 50px; overflow: scroll; } </style>').appendTo("head");$.fn.getScrollbarWidth=function(){var b=document.createElement("div");b.className="modal-scrollbar-measure";document.body.appendChild(b);var a=b.offsetWidth-b.clientWidth;document.body.removeChild(b);return a}},beforeEach:function(){$.fn.bootstrapModal=$.fn.modal.noConflict()},afterEach:function(){$.fn.modal=$.fn.bootstrapModal;delete $.fn.bootstrapModal}});QUnit.test("should provide no conflict",function(a){a.expect(1);a.strictEqual($.fn.modal,undefined,"modal was set back to undefined (orig value)")});QUnit.test("should throw explicit error on undefined method",function(a){a.expect(1);var b=$('<div id="modal-test"/>');b.bootstrapModal();try{b.bootstrapModal("noMethod")}catch(c){a.strictEqual(c.message,'No method named "noMethod"')}});QUnit.test("should return jquery collection containing the element",function(a){a.expect(2);var c=$('<div id="modal-test"/>');var b=c.bootstrapModal();a.ok(b instanceof $,"returns jquery collection");a.strictEqual(b[0],c[0],"collection contains element")});QUnit.test("should expose defaults var for settings",function(a){a.expect(1);a.ok($.fn.bootstrapModal.Constructor.Default,"default object exposed")});QUnit.test("should insert into dom when show method is called",function(b){b.expect(1);var a=b.async();$('<div id="modal-test"/>').on("shown.bs.modal",function(){b.notEqual($("#modal-test").length,0,"modal inserted into dom");a()}).bootstrapModal("show")});QUnit.test("should fire show event",function(b){b.expect(1);var a=b.async();$('<div id="modal-test"/>').on("show.bs.modal",function(){b.ok(true,"show event fired");a()}).bootstrapModal("show")});QUnit.test("should not fire shown when show was prevented",function(b){b.expect(1);var a=b.async();$('<div id="modal-test"/>').on("show.bs.modal",function(c){c.preventDefault();b.ok(true,"show event fired");a()}).on("shown.bs.modal",function(){b.ok(false,"shown event fired")}).bootstrapModal("show")});QUnit.test("should hide modal when hide is called",function(b){b.expect(3);var a=b.async();$('<div id="modal-test"/>').on("shown.bs.modal",function(){b.ok($("#modal-test").is(":visible"),"modal visible");b.notEqual($("#modal-test").length,0,"modal inserted into dom");$(this).bootstrapModal("hide")}).on("hidden.bs.modal",function(){b.ok(!$("#modal-test").is(":visible"),"modal hidden");a()}).bootstrapModal("show")});QUnit.test("should toggle when toggle is called",function(b){b.expect(3);var a=b.async();$('<div id="modal-test"/>').on("shown.bs.modal",function(){b.ok($("#modal-test").is(":visible"),"modal visible");b.notEqual($("#modal-test").length,0,"modal inserted into dom");$(this).bootstrapModal("toggle")}).on("hidden.bs.modal",function(){b.ok(!$("#modal-test").is(":visible"),"modal hidden");a()}).bootstrapModal("toggle")});QUnit.test('should remove from dom when click [data-dismiss="modal"]',function(b){b.expect(3);var a=b.async();$('<div id="modal-test"><span class="close" data-dismiss="modal"/></div>').on("shown.bs.modal",function(){b.ok($("#modal-test").is(":visible"),"modal visible");b.notEqual($("#modal-test").length,0,"modal inserted into dom");$(this).find(".close").trigger("click")}).on("hidden.bs.modal",function(){b.ok(!$("#modal-test").is(":visible"),"modal hidden");a()}).bootstrapModal("toggle")});QUnit.test('should allow modal close with "backdrop:false"',function(b){b.expect(2);var a=b.async();$('<div id="modal-test" data-backdrop="false"/>').on("shown.bs.modal",function(){b.ok($("#modal-test").is(":visible"),"modal visible");$(this).bootstrapModal("hide")}).on("hidden.bs.modal",function(){b.ok(!$("#modal-test").is(":visible"),"modal hidden");a()}).bootstrapModal("show")});QUnit.test("should close modal when clicking outside of modal-content",function(b){b.expect(3);var a=b.async();$('<div id="modal-test"><div class="contents"/></div>').on("shown.bs.modal",function(){b.notEqual($("#modal-test").length,0,"modal inserted into dom");$(".contents").trigger("click");b.ok($("#modal-test").is(":visible"),"modal visible");$("#modal-test").trigger("click")}).on("hidden.bs.modal",function(){b.ok(!$("#modal-test").is(":visible"),"modal hidden");a()}).bootstrapModal("show")});QUnit.test('should not close modal when clicking outside of modal-content if data-backdrop="true"',function(b){b.expect(1);var a=b.async();$('<div id="modal-test" data-backdrop="false"><div class="contents"/></div>').on("shown.bs.modal",function(){$("#modal-test").trigger("click");b.ok($("#modal-test").is(":visible"),"modal not hidden");a()}).bootstrapModal("show")});QUnit.test("should close modal when escape key is pressed via keydown",function(c){c.expect(3);var b=c.async();var a=$('<div id="modal-test"/>');a.on("shown.bs.modal",function(){c.ok($("#modal-test").length,"modal inserted into dom");c.ok($("#modal-test").is(":visible"),"modal visible");a.trigger($.Event("keydown",{which:27}));setTimeout(function(){c.ok(!$("#modal-test").is(":visible"),"modal hidden");a.remove();b()},0)}).bootstrapModal("show")});QUnit.test("should not close modal when escape key is pressed via keyup",function(c){c.expect(3);var b=c.async();var a=$('<div id="modal-test"/>');a.on("shown.bs.modal",function(){c.ok($("#modal-test").length,"modal inserted into dom");c.ok($("#modal-test").is(":visible"),"modal visible");a.trigger($.Event("keyup",{which:27}));setTimeout(function(){c.ok(a.is(":visible"),"modal still visible");a.remove();b()},0)}).bootstrapModal("show")});QUnit.test("should trigger hide event once when clicking outside of modal-content",function(c){c.expect(1);var b=c.async();var a;$('<div id="modal-test"><div class="contents"/></div>').on("shown.bs.modal",function(){a=0;$("#modal-test").trigger("click")}).on("hide.bs.modal",function(){a+=1;c.strictEqual(a,1,"modal hide triggered once");b()}).bootstrapModal("show")});QUnit.test("should remove aria-hidden attribute when shown, add it back when hidden",function(b){b.expect(3);var a=b.async();$('<div id="modal-test" aria-hidden="true"/>').on("shown.bs.modal",function(){b.notOk($("#modal-test").is("[aria-hidden]"),"aria-hidden attribute removed");$(this).bootstrapModal("hide")}).on("hidden.bs.modal",function(){b.ok($("#modal-test").is("[aria-hidden]"),"aria-hidden attribute added");b.strictEqual($("#modal-test").attr("aria-hidden"),"true",'correct aria-hidden="true" added');a()}).bootstrapModal("show")});QUnit.test('should close reopened modal with [data-dismiss="modal"] click',function(b){b.expect(2);var a=b.async();$('<div id="modal-test"><div class="contents"><div id="close" data-dismiss="modal"/></div></div>').one("shown.bs.modal",function(){$("#close").trigger("click")}).one("hidden.bs.modal",function(){b.ok(!$("#modal-test").is(":visible"),"modal hidden");$(this).one("shown.bs.modal",function(){$("#close").trigger("click")}).one("hidden.bs.modal",function(){b.ok(!$("#modal-test").is(":visible"),"modal hidden");a()}).bootstrapModal("show")}).bootstrapModal("show")});QUnit.test("should restore focus to toggling element when modal is hidden after having been opened via data-api",function(b){b.expect(1);var a=b.async();var c=$('<button data-toggle="modal" data-target="#modal-test"/>').appendTo("#qunit-fixture");$('<div id="modal-test"><div class="contents"><div id="close" data-dismiss="modal"/></div></div>').on("hidden.bs.modal",function(){setTimeout(function(){b.ok($(document.activeElement).is(c),"toggling element is once again focused");a()},0)}).on("shown.bs.modal",function(){$("#close").trigger("click")}).appendTo("#qunit-fixture");c.trigger("click")});QUnit.test("should not restore focus to toggling element if the associated show event gets prevented",function(b){b.expect(1);var a=b.async();var c=$('<button data-toggle="modal" data-target="#modal-test"/>').appendTo("#qunit-fixture");var d=$('<button id="other-btn"/>').appendTo("#qunit-fixture");$('<div id="modal-test"><div class="contents"><div id="close" data-dismiss="modal"/></div>').one("show.bs.modal",function(f){f.preventDefault();d.trigger("focus");setTimeout($.proxy(function(){$(this).bootstrapModal("show")},this),0)}).on("hidden.bs.modal",function(){setTimeout(function(){b.ok($(document.activeElement).is(d),"focus returned to toggling element");a()},0)}).on("shown.bs.modal",function(){$("#close").trigger("click")}).appendTo("#qunit-fixture");c.trigger("click")});QUnit.test("should adjust the inline body padding when opening and restore when closing",function(b){b.expect(2);var a=b.async();var d=$(document.body);var c=d.css("padding-right");$('<div id="modal-test"/>').on("hidden.bs.modal",function(){var e=d.css("padding-right");b.strictEqual(e,c,"body padding should be reset after closing");d.removeAttr("style");a()}).on("shown.bs.modal",function(){var e=parseFloat(c)+$(this).getScrollbarWidth()+"px";var f=d.css("padding-right");b.strictEqual(f,e,"body padding should be adjusted while opening");$(this).bootstrapModal("hide")}).bootstrapModal("show")});QUnit.test("should store the original body padding in data-padding-right before showing",function(b){b.expect(2);var a=b.async();var d=$(document.body);var c="0px";d.css("padding-right",c);$('<div id="modal-test"/>').on("hidden.bs.modal",function(){b.strictEqual(d.data("padding-right"),undefined,"data-padding-right should be cleared after closing");d.removeAttr("style");a()}).on("shown.bs.modal",function(){b.strictEqual(d.data("padding-right"),c,"original body padding should be stored in data-padding-right");$(this).bootstrapModal("hide")}).bootstrapModal("show")});QUnit.test("should adjust the inline padding of fixed elements when opening and restore when closing",function(c){c.expect(2);var b=c.async();var a=$('<div class="fixed-top"></div>').appendTo("#qunit-fixture");var d=a.css("padding-right");$('<div id="modal-test"/>').on("hidden.bs.modal",function(){var e=a.css("padding-right");c.strictEqual(e,d,"fixed element padding should be reset after closing");a.remove();b()}).on("shown.bs.modal",function(){var e=parseFloat(d)+$(this).getScrollbarWidth()+"px";var f=a.css("padding-right");c.strictEqual(f,e,"fixed element padding should be adjusted while opening");$(this).bootstrapModal("hide")}).bootstrapModal("show")});QUnit.test("should store the original padding of fixed elements in data-padding-right before showing",function(c){c.expect(2);var b=c.async();var a=$('<div class="fixed-top"></div>').appendTo("#qunit-fixture");var d="0px";a.css("padding-right",d);$('<div id="modal-test"/>').on("hidden.bs.modal",function(){c.strictEqual(a.data("padding-right"),undefined,"data-padding-right should be cleared after closing");a.remove();b()}).on("shown.bs.modal",function(){c.strictEqual(a.data("padding-right"),d,"original fixed element padding should be stored in data-padding-right");$(this).bootstrapModal("hide")}).bootstrapModal("show")});QUnit.test("should adjust the inline margin of the navbar-toggler when opening and restore when closing",function(c){c.expect(2);var b=c.async();var a=$('<div class="navbar-toggler"></div>').appendTo("#qunit-fixture");var d=a.css("margin-right");$('<div id="modal-test"/>').on("hidden.bs.modal",function(){var e=a.css("margin-right");c.strictEqual(e,d,"navbar-toggler margin should be reset after closing");a.remove();b()}).on("shown.bs.modal",function(){var e=parseFloat(d)+$(this).getScrollbarWidth()+"px";var f=a.css("margin-right");c.strictEqual(f,e,"navbar-toggler margin should be adjusted while opening");$(this).bootstrapModal("hide")}).bootstrapModal("show")});QUnit.test("should store the original margin of the navbar-toggler in data-margin-right before showing",function(c){c.expect(2);var b=c.async();var a=$('<div class="navbar-toggler"></div>').appendTo("#qunit-fixture");var d="0px";a.css("margin-right",d);$('<div id="modal-test"/>').on("hidden.bs.modal",function(){c.strictEqual(a.data("margin-right"),undefined,"data-margin-right should be cleared after closing");a.remove();b()}).on("shown.bs.modal",function(){c.strictEqual(a.data("margin-right"),d,"original navbar-toggler margin should be stored in data-margin-right");$(this).bootstrapModal("hide")}).bootstrapModal("show")});QUnit.test("should ignore values set via CSS when trying to restore body padding after closing",function(b){b.expect(1);var a=b.async();var d=$(document.body);var c=$("<style>body { padding-right: 42px; }</style>").appendTo("head");$('<div id="modal-test"/>').on("hidden.bs.modal",function(){b.ok(!d.attr("style"),"body does not have inline padding set");c.remove();a()}).on("shown.bs.modal",function(){$(this).bootstrapModal("hide")}).bootstrapModal("show")});QUnit.test("should ignore other inline styles when trying to restore body padding after closing",function(b){b.expect(2);var a=b.async();var d=$(document.body);var c=$("<style>body { padding-right: 42px; }</style>").appendTo("head");d.css("color","red");$('<div id="modal-test"/>').on("hidden.bs.modal",function(){b.strictEqual(d[0].style.paddingRight,"","body does not have inline padding set");b.strictEqual(d[0].style.color,"red","body still has other inline styles set");d.removeAttr("style");c.remove();a()}).on("shown.bs.modal",function(){$(this).bootstrapModal("hide")}).bootstrapModal("show")});QUnit.test("should properly restore non-pixel inline body padding after closing",function(b){b.expect(1);var a=b.async();var c=$(document.body);c.css("padding-right","5%");$('<div id="modal-test"/>').on("hidden.bs.modal",function(){b.strictEqual(c[0].style.paddingRight,"5%","body does not have inline padding set");c.removeAttr("style");a()}).on("shown.bs.modal",function(){$(this).bootstrapModal("hide")}).bootstrapModal("show")});QUnit.test("should not follow link in area tag",function(b){b.expect(2);var a=b.async();$('<map><area id="test" shape="default" data-toggle="modal" data-target="#modal-test" href="demo.html"/></map>').appendTo("#qunit-fixture");$('<div id="modal-test"><div class="contents"><div id="close" data-dismiss="modal"/></div></div>').appendTo("#qunit-fixture");$("#test").on("click.bs.modal.data-api",function(c){b.notOk(c.isDefaultPrevented(),"navigating to href will happen");setTimeout(function(){b.ok(c.isDefaultPrevented(),"model shown instead of navigating to href");a()},1)}).trigger("click")})});